@use 'sass:map';
@use 'sass:math';
@use '../core/theming/theming';
@use '../core/typography/typography';
@use '../core/typography/typography-utils';
@use '../core/density/private/compatibility';
@use './stepper-variables';

@mixin color($config-or-theme) {
  $config: theming.get-color-config($config-or-theme);
  $foreground: map.get($config, foreground);
  $background: map.get($config, background);
  $primary: map.get($config, primary);
  $accent: map.get($config, accent);
  $warn: map.get($config, warn);

  .tak-step-header {
    &.cdk-keyboard-focused,
    &.cdk-program-focused,
    &:hover:not([aria-disabled]),
    &:hover[aria-disabled='false'] {
      background-color: theming.get-color-from-palette($background, hover);
    }

    &:hover[aria-disabled='true'] {
      cursor: default;
    }

    // On touch devices the :hover state will linger on the element after a tap.
    // Reset it via `@media` after the declaration, because the media query isn't
    // supported by all browsers yet.
    @media (hover: none) {
      &:hover {
        background: none;
      }
    }

    .tak-step-label,
    .tak-step-optional {
      // TODO(josephperrott): Update to using a corrected disabled-text contrast
      // instead of secondary-text.
      color: theming.get-color-from-palette($foreground, secondary-text);
    }

    .tak-step-icon {
      // TODO(josephperrott): Update to using a corrected disabled-text contrast
      // instead of secondary-text.
      background-color: theming.get-color-from-palette($foreground, secondary-text);
      color: theming.get-color-from-palette($primary, default-contrast);
    }

    .tak-step-icon-selected,
    .tak-step-icon-state-done,
    .tak-step-icon-state-edit {
      background-color: theming.get-color-from-palette($primary);
      color: theming.get-color-from-palette($primary, default-contrast);
    }

    &.tak-accent {
      .tak-step-icon {
        color: theming.get-color-from-palette($accent, default-contrast);
      }

      .tak-step-icon-selected,
      .tak-step-icon-state-done,
      .tak-step-icon-state-edit {
        background-color: theming.get-color-from-palette($accent);
        color: theming.get-color-from-palette($accent, default-contrast);
      }
    }

    &.tak-warn {
      .tak-step-icon {
        color: theming.get-color-from-palette($warn, default-contrast);
      }

      .tak-step-icon-selected,
      .tak-step-icon-state-done,
      .tak-step-icon-state-edit {
        background-color: theming.get-color-from-palette($warn);
        color: theming.get-color-from-palette($warn, default-contrast);
      }
    }

    .tak-step-icon-state-error {
      background-color: transparent;
      color: theming.get-color-from-palette($warn, text);
    }

    .tak-step-label.tak-step-label-active {
      color: theming.get-color-from-palette($foreground, text);
    }

    .tak-step-label.tak-step-label-error {
      color: theming.get-color-from-palette($warn, text);
    }
  }

  .tak-stepper-horizontal,
  .tak-stepper-vertical {
    background-color: theming.get-color-from-palette($background, card);
  }

  .tak-stepper-vertical-line::before {
    border-left-color: theming.get-color-from-palette($foreground, divider);
  }

  .tak-horizontal-stepper-header::before,
  .tak-horizontal-stepper-header::after,
  .tak-stepper-horizontal-line {
    border-top-color: theming.get-color-from-palette($foreground, divider);
  }
}

@mixin typography($config-or-theme) {
  $config: typography.private-typography-to-2014-config(
    theming.get-typography-config($config-or-theme)
  );
  .tak-stepper-vertical,
  .tak-stepper-horizontal {
    font-family: typography-utils.font-family($config);
  }

  .tak-step-label {
    font: {
      size: typography-utils.font-size($config, body-1);
      weight: typography-utils.font-weight($config, body-1);
    }
  }

  .tak-step-sub-label-error {
    font-weight: normal;
  }

  .tak-step-label-error {
    font-size: typography-utils.font-size($config, body-2);
  }

  .tak-step-label-selected {
    font: {
      size: typography-utils.font-size($config, body-2);
      weight: typography-utils.font-weight($config, body-2);
    }
  }
}

@mixin density($config-or-theme) {
  $density-scale: theming.get-density-config($config-or-theme);
  $height: compatibility.private-density-prop-value(
    stepper-variables.$density-config,
    $density-scale,
    height
  );
  $vertical-padding: math.div($height - stepper-variables.$label-header-height, 2);

  @include compatibility.private-density-legacy-compatibility() {
    .tak-horizontal-stepper-header {
      height: $height;
    }

    .tak-stepper-label-position-bottom .tak-horizontal-stepper-header,
    .tak-vertical-stepper-header {
      padding: $vertical-padding stepper-variables.$side-gap;
    }

    // Ensures that the vertical lines for the step content exceed into the step
    // headers with a given distance (`$tak-stepper-line-gap`) to the step icon.
    .tak-stepper-vertical-line::before {
      top: stepper-variables.$line-gap - $vertical-padding;
      bottom: stepper-variables.$line-gap - $vertical-padding;
    }

    // Ensures that the horizontal lines for the step header are centered vertically.
    .tak-stepper-label-position-bottom .tak-horizontal-stepper-header {
      &::after,
      &::before {
        top: $vertical-padding + math.div(stepper-variables.$label-header-height, 2);
      }
    }

    // Ensures that the horizontal line for the step content is aligned centered vertically.
    .tak-stepper-label-position-bottom .tak-stepper-horizontal-line {
      top: $vertical-padding + math.div(stepper-variables.$label-header-height, 2);
    }
  }
}

@mixin theme($theme-or-color-config) {
  $theme: theming.private-legacy-get-theme($theme-or-color-config);
  @include theming.private-check-duplicate-theme-styles($theme, 'tak-stepper') {
    $color: theming.get-color-config($theme);
    $density: theming.get-density-config($theme);
    $typography: theming.get-typography-config($theme);

    @if $color != null {
      @include color($color);
    }
    @if $density != null {
      @include density($density);
    }
    @if $typography != null {
      @include typography($typography);
    }
  }
}
